name: CD

# main,cicd 브랜치에 push, PR 이벤트 발생시 동작.
on:
  push:
    branches:
      - 'main'
      - 'cicd'
  pull_request:
    branches:
      - 'main'
      - 'cicd'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      #자바버전 17 세팅
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'


      #githubsecrets yml 환경변수 주입.
      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          spring.datasource.driver-class-name: ${{ secrets.DB_DRIVER }}
          spring.jwt.secret: ${{ secrets.JWT_SECRET }}
          spring.mail.username: ${{secrets.MAIL_USERNAME}}
          spring.mail.password: ${{secrets.MAIL_PASSWORD}}
          spring.data.redis.host: ${{secrets.REDIS_HOST}}
          spring.data.redis.port: ${{secrets.REDIS_PORT}}


      #gradlew 실행을 위한 권한 추가
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Spring Boot 어플리케이션 Build (1)
      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      # Docker 이미지 Build (2) : 최동훈 도커허브이용
      - name: docker image build
        run: docker build -t ulsandonghun/zigzzang .

      # DockerHub Login (3)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Docker Hub push (4)
      - name: docker Hub push
        run: docker push ulsandonghun/zigzzang

      # GET GitHub IP (5)
      - name: get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      # Configure AWS Credentials (6) - AWS 접근 권한 취득(IAM)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Add github ip to AWS (7)
      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # AWS EC2 Server Connect & Docker 명령어 실행 (8)
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop zigzzang
            sudo docker rm zigzzang
            sudo docker pull ulsandonghun/zigzzang
            
            
            sudo docker run -it -p 8080:8080 \
            --name zigzzang \
            -e SPRING_DATASOURCE_URL=${{ secrets.DB_URL }} \
            -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
            -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
            -e SPRING_DATASOURCE_DRIVER=${{ secrets.DB_DRIVER }} \
            -e SPRING_JWT_SECRET=${{ secrets.JWT_SECRET }} \
            -e SPRING_MAIL_USERNAME=${{secrets.MAIL_USERNAME}} \
            -e SPRING_MAIL_PASSWORD=${{secrets.MAIL_PASSWORD}} \
            -e SPRING_REDIS_HOST=${{secrets.REDIS_HOST}} \
            -e SPRING_REDIS_PORT=${{secrets.REDIS_PORT}} \
            -d ulsandonghun/zigzzang
            
            docker rmi -f $(docker images -f "dangling=true" -q)

      # REMOVE Github IP FROM security group (9)
      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32